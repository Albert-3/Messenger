@using Messenger.App.DTOs
@model List<GetMessageDTO>

@{
    ViewData["Title"] = "Message";
    Layout = "_Layout";
}
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <div>@error.ErrorMessage</div>
        }
    </div>
}
<div class="chat-container container mt-4">
    <div class="chat-box card shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Chat</h5>
            <a href="@Url.Action("GetUsers", "User")" class="btn btn-light btn-sm">Back</a>
        </div>

        <div id="messageContainer" class="card-body chat-messages">
            @if (Model != null && Model.Any())
            {
                foreach (var message in Model)
                {
                    var isSender = message.SenderId == ViewBag.SenderId;
                    <div class="d-flex @(isSender ? "justify-content-end" : "justify-content-start") mb-3">
                        <div class="message-bubble @(isSender ? "sent" : "received") shadow-sm">
                            <div class="message-header">
                                <span class="sender-name @(isSender ? "you" : "other")">
                                    @(isSender ? "You" : message.SenderName)
                                </span>
                                <span class="message-date @(isSender ? "you" : "other")"
                                      title="@message.Date.ToString("F")">
                                    @message.Date.ToString("HH:mm")
                                </span>
                            </div>
                            <div class="message-text">@message.Text</div>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="card-footer bg-white p-3">
            <div class="input-group">
                <textarea id="messageInput" maxlength="300" placeholder="Type your message..." rows="3"></textarea>
                <button class="btn btn-primary" id="sendMessageButton" type="button">Send</button>
            </div>
            <small id="charsLeft" class="text-muted mt-1">300 characters left</small>
        </div>
    </div>
</div>

<input type="hidden" id="senderId" value="@ViewBag.SenderId" />
<input type="hidden" id="recipientId" value="@ViewBag.RecipientId" />

<style>
    #messageInput {
        width: 570px;
        max-width: 100%;
        height: 55px;
        resize: none;
        font-size: 1rem;
        padding: 8px 12px;
    }

    .chat-container {
        max-width: 700px;
    }

    .chat-box {
        height: 650px;
        display: flex;
        flex-direction: column;
        border-radius: 12px;
        overflow: hidden;
        background: #fff;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        background: #fefefe;
    }

    .message-bubble {
        max-width: 65%;
        font-size: 1rem;
        padding: 10px 15px;
        border-radius: 12px;
        background-color: #e9ecef;
        word-wrap: break-word;
    }

    .sent {
        background-color: #d0e7ff;
    }

    .received {
        background-color: #e2e3e5;
    }

    .message-header {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin-bottom: 6px;
    }

    .sender-name {
        font-weight: bold;
        font-size: 1rem;
        color: black;
        margin-bottom: 2px;
    }

        .sender-name.other {
            color: black;
        }

    .message-date {
        font-size: 0.8rem;
        white-space: nowrap;
    }

        .message-date.you {
            color: black
        }

        .message-date.other {
            color: black;
        }

    .message-text {
        white-space: pre-wrap;
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const senderId = document.getElementById("senderId").value;
        const recipientId = document.getElementById("recipientId").value;
        const messageInput = document.getElementById("messageInput");
        const messageContainer = document.getElementById("messageContainer");
        const charsLeft = document.getElementById("charsLeft");

        const maxLength = 300;
        messageInput.addEventListener('input', () => {
            const remaining = maxLength - messageInput.value.length;
            charsLeft.textContent = `${remaining} characters left`;
        });

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

            connection.on("ReceiveMessage", function (senderGuid, senderName, messageText, timestamp) {
            const isSender = senderGuid === senderId;
            const messageDiv = document.createElement("div");
            messageDiv.className = `d-flex ${isSender ? "justify-content-end" : "justify-content-start"} mb-3`;

            const bubble = document.createElement("div");
            bubble.className = `message-bubble ${isSender ? "sent" : "received"} shadow-sm`;

            const header = document.createElement("div");
            header.className = "message-header";

            const nameSpan = document.createElement("span");
            nameSpan.className = `sender-name ${isSender ? "you" : "other"}`;
            nameSpan.textContent = isSender ? "You" : senderName;

            const dateSpan = document.createElement("span");
            dateSpan.className = `message-date ${isSender ? "you" : "other"}`;
            const date = new Date(timestamp);
            dateSpan.textContent = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            header.appendChild(nameSpan);
            header.appendChild(dateSpan);

            const textDiv = document.createElement("div");
            textDiv.className = "message-text";
            textDiv.textContent = messageText;

            bubble.appendChild(header);
            bubble.appendChild(textDiv);
            messageDiv.appendChild(bubble);
            messageContainer.appendChild(messageDiv);

            messageContainer.scrollTop = messageContainer.scrollHeight;
        });
        connection.start().then(function () {
            connection.invoke("JoinChat", {
                senderId: senderId,
                recipientId: recipientId
            });
        }).catch(err => console.error(err.toString()));
                document.getElementById("sendMessageButton").addEventListener("click", async function () {
            const text = messageInput.value.trim();
            if (!text) return;

            const response = await fetch("/Message/SendMessage", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ senderId, recipientId, text })
            });

            if (response.ok) {
                messageInput.value = "";
                messageInput.focus();
            } else {
                alert("Failed to send message.");
            }
        });

        messageInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                document.getElementById("sendMessageButton").click();
            }
        });

        window.addEventListener('load', () => {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });
    </script>
}
